#!/bin/bash
# Track dependendencies of a list of packages
#  and do something (usuall email) when the dependencies change
#

#####
# Variables
#####
WORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${WORK_DIR}/conf/config.inc

# BINARY VARIABLES
: ${VERBOSE:="FALSE"}

PACKAGELIST_DIR="${WORK_DIR}/packagelists-${REPO_BASE}"
NEW_TIMESTAMP=$(cat ${DATA_DIR_BASE}/x86_64/${NEW_DIR}/buildroot-date-check.txt)
PACKAGE_DATA_DIR="${PACKAGE_DIR_BASE}/data/${REPO_BASE}"
if [ -d ${PACKAGE_DATA_DIR} ] ; then
  OLD_TIMESTAMP=$(cat ${PACKAGE_DATA_DIR}/timestamp)
else
  OLD_TIMESTAMP="NEVER"
  mkdir -p ${PACKAGE_DATA_DIR}
  echo ${OLD_TIMESTAMP} > ${PACKAGE_DATA_DIR}/timestamp
  touch ${PACKAGE_DATA_DIR}/Source.NVR
  touch ${PACKAGE_DATA_DIR}/changes.added.NVR
  touch ${PACKAGE_DATA_DIR}/changes.removed.NVR
fi
PACKAGE_DATA_ARCHIVE_DIR=${PACKAGE_DIR_BASE}/data/archive/${REPO_BASE}/${OLD_TIMESTAMP}

#####
# Archive everything 
#####
mkdir -p ${PACKAGE_DATA_ARCHIVE_DIR}
mv -f ${PACKAGE_DATA_DIR}/* ${PACKAGE_DATA_ARCHIVE_DIR}

#####
# Put in new data 
#####
echo ${NEW_TIMESTAMP} > ${PACKAGE_DATA_DIR}/timestamp
cp ${PACKAGELIST_DIR}/Packages.Source.Buildroot.NVR.all-arches ${PACKAGE_DATA_DIR}/Source.NVR
comm -23 ${PACKAGE_DATA_DIR}/Source.NVR ${PACKAGE_DATA_ARCHIVE_DIR}/Source.NVR >> ${PACKAGE_DATA_DIR}/changes.added.NVR
comm -13 ${PACKAGE_DATA_DIR}/Source.NVR ${PACKAGE_DATA_ARCHIVE_DIR}/Source.NVR >> ${PACKAGE_DATA_DIR}/changes.removed.NVR

#####
# Gather info on all added packages 
#####
cat ${PACKAGE_DATA_DIR}/changes.added.NVR | xargs --max-procs=5 -I PACKAGE  ${WORK_DIR}/package-info-gather -r ${REPONAME} PACKAGE

#####
# Remove links not already remove from above 
#####
cat ${PACKAGE_DATA_DIR}/changes.removed.NVR | while read this_nvra
do
  this_nvr=$(echo ${this_nvra} | sed "s/.rpm$//" | sed "s/.src$//")
  source_name=$(cat ${PACKAGE_DIR_BASE}/*/${this_nvr}/source-name.txt)
  source_latest_link="${PACKAGE_DIR_BASE}/${source_name}/${REPONAME}-latest"
  source_latest_real="$(realpath -e --relative-base=${PACKAGE_DIR_BASE}/${source_name} ${source_latest_link})"
  echo "link: ${source_latest_real}"
  echo "real: ${this_nvr}"
  if [ "${source_latest_real}" == "${this_nvr}" ] ; then
    rm -f ${source_latest_link}
  fi
done

#####
# generate output for all packages that do not have it yet
#####
ls -1d ${PACKAGE_DIR_BASE}/*/${REPONAME}-latest | while read package_path
do
 if ! [ -s ${package_path}/index.html ] ; then
   echo "Output: $( echo ${package_path} | sed "s|/${REPONAME}-latest$||")"
   ${WORK_DIR}/package-create-output ${package_path}
 fi
done

#####
# Create main html index
#####
echo "Creating main index.html"
HTML_FILE="${PACKAGE_DIR_BASE}/index-${REPONAME}.html"
rm -f ${HTML_FILE}
echo "<html>" >> ${HTML_FILE}
echo "<head><title>${REPONAME} Package Info</title></head>" >> ${HTML_FILE}
echo "<body>" >> ${HTML_FILE}
echo "<h1>${REPONAME} Package Info</h1>" >> ${HTML_FILE}
ls -1 ${PACKAGE_DIR_BASE}/*/${REPONAME}-latest/index.html | sed 's|/index.html$||' | while read package_path
do
  package_name=$(cat ${package_path}/source-name.txt)
  package_nvr=$(cat ${package_path}/source-nvr.txt)
  echo "<br><a href=\"${package_name}/${package_nvr}/index.html\"><b>${package_name}</b></a> ${package_nvr}" >> ${HTML_FILE}
done
echo "</body>" >> ${HTML_FILE}
echo "</html>" >> ${HTML_FILE}

echo "Finished"

exit 0
