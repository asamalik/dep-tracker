#!/bin/bash
# Usage: create-srpm-buildroot-repos

WORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $WORK_DIR/conf/config.inc

errexit() {
    echo "$@" >&2
    exit 5
}

#####
# Variables
#####
# DIRS
# FILES/VARIABLES
# BINARY VARIABLES
# LIST VARIABLES
# ASSOCIATIVE ARRAY VARIABLES
declare -A ARCHFUL_SOURCE_LIST
declare -A SRPM_MAPPING
declare -a SOURCE_LIST


# read_source_package_lists outfile
# data_dir: directory from which to read package lists
# srpm_dir: directory in which source rpms can be found
#
# Read in the list of archful source packages into global associative
# array ARCHFUL_SOURCE_LIST, and the mapping of package names to SRPM
# file names into global associative array SRPM_MAPPING.
read_source_package_lists() {
  local data_dir="$1"
  local srpm_dir="$2"

  local archful_pkglist_file="${data_dir}/${BR_ARCHFUL_SOURCE_PKGNAMES_FILENAME}"
  local pkg_to_srpm_map_file="${data_dir}/${BR_SOURCE_PKGMAP_FILENAME}"
  local pkgname srpm

  # read in the list of archful source packages
  while read pkgname
  do
    ARCHFUL_SOURCE_LIST[${pkgname}]=1
  done < "${archful_pkglist_file}"

  # read in the mapping of package names to SRPM base file names
  while IFS="=" read pkgname srpm
  do
    SRPM_MAPPING[${pkgname}]="${srpm_dir}/${srpm}"
  done < "${pkg_to_srpm_map_file}"

  echo "${#ARCHFUL_SOURCE_LIST[@]} archful buildroot source packages."
  echo "${#SRPM_MAPPING[@]} buildroot source packages for all architectures combined."
}


# read_arch_source_package_list arch data_dir
# arch: the architecture
# data_dir: directory from which to read package lists
#
# Read the arch-specific buildroot source package list into
# global array SOURCE_LIST.
read_arch_source_package_list() {
  local arch="$1"
  local data_dir="$2"

  local src_pkgs_file="${data_dir}/${BR_SOURCE_PKGNAMES_FILENAME}"

  echo "Reading source package list for arch ${arch}..."

  if [ ! -r "${src_pkgs_file}" ] ; then
    errexit "Missing buildroot source package list file for arch ${arch}: ${src_pkgs_file}"
  fi

  mapfile -t SOURCE_LIST < "${src_pkgs_file}"

  if [ ${#SOURCE_LIST[@]} -eq 0 ] ; then
    errexit "No buildroot source packages listed in ${src_pkgs_file}."
  fi

  echo "${#SOURCE_LIST[@]} buildroot source packages for arch ${arch}."
}

# populate_arch_source_rpm_repo arch arch_repo_dir pkg1 pkg2 ...
# arch: the architecture
# arch_repo_dir: arch-specific directory for repos
# pkg1 ...: list of base source package names to add to repo
populate_arch_source_rpm_repo() {
  local arch="$1"
  local arch_repo_dir="$2"
  local -a pkg_list=("${@:3}")

  local this_package srpm srpm_in_repo

  echo "Building source package repo for arch $arch with ${#pkg_list[@]} packages"

  mkdir -p "${arch_repo_dir}/sources"
  for this_package in "${pkg_list[@]}"
  do
    srpm="${SRPM_MAPPING[${this_package}]}"
    srpm_in_repo="${arch_repo_dir}/sources/${srpm##*/}"
    if [ -v ARCHFUL_SOURCE_LIST["${this_package}"] ]; then
      # archful SRPMs should already exist since they were previously rebuilt
      if [ ! -r "${srpm_in_repo}" ]; then
        echo "WARNING: Archful SRPM missing from target repo location!: ${srpm_in_repo}"
      fi
      continue
    fi
    # make a hard link from source directory if not present in repo
    if [ ! -r "${srpm_in_repo}" ]; then
      ln "${srpm}" "${srpm_in_repo}"
    fi
  done
}

# recreate_archful_source_packages repos_dir srpm_dir pkg1 pkg2 ...
# repos_dir: top level directory for repos
# srpm_dir: directory in which source rpms can be found
# pkg1 ...: list of base source package names to recreate and add to repo
recreate_archful_source_packages() {
  local repos_dir="$1"
  local srpm_dir="$2"
  local -a pkg_list=("${@:3}")

  local this_package srpm
  local scratch_srpm_file=$(mktemp)

  echo "Recreating source packages for ${#pkg_list[@]} archful packages"

  # write out a list to all of the source packages to be rebuilt
  for this_package in "${pkg_list[@]}"
  do
    echo "${SRPM_MAPPING[${this_package}]##*/}"
  done > "${scratch_srpm_file}"

  # Usage: mock-recreate-srpms output-dir srpm-dir srpm-list-file [ version ]
  ${WORK_DIR}/mock-recreate-srpms "${repos_dir}" "${srpm_dir}" "${scratch_srpm_file}"

  rm -f "${scratch_srpm_file}"
}

# update_arch_repo_metadata arch arch_repo_dir
# arch: the architecture
# arch_repo_dir: arch-specific directory for repos
update_arch_repo_metadata() {
  local arch="$1"
  local arch_data_dir="$2"

  echo "Updating repo metadata for arch ${arch}"
  createrepo_c --update "${arch_repo_dir}"
}

echo "Creating architecture-specific source package buildroot repos  ..."

data_dir="${DATA_DIR_BASE}/source/${NEW_DIR}"
srpm_dir="${data_dir}/srpms"
repos_dir="${DATA_DIR_BASE}/repos/${NEW_DIR}"

read_source_package_lists "${data_dir}" "${srpm_dir}"

recreate_archful_source_packages "${repos_dir}" "${srpm_dir}" ${!ARCHFUL_SOURCE_LIST[@]}

for this_arch in ${ARCH_LIST[@]}
do
  echo "Working on arch ${this_arch}  ..."

  arch_data_dir="${DATA_DIR_BASE}/${this_arch}/${NEW_DIR}"
  arch_repo_dir="${DATA_DIR_BASE}/repos/${NEW_DIR}/${this_arch}"

  read_arch_source_package_list ${this_arch} "${arch_data_dir}"

  populate_arch_source_rpm_repo ${this_arch} "${arch_repo_dir}" ${SOURCE_LIST[@]}

  update_arch_repo_metadata ${this_arch} "${arch_repo_dir}"
done

exit 0
